import statistics
import gym
import time
import math
import lbforaging
import random
import torch as T
import torch.nn.functional as F
import torch.nn as nn
import torch.optim as optim
import numpy as np
from torch.utils.tensorboard import SummaryWriter
from collections import namedtuple, deque

device = T.device('cuda:0' if T.cuda.is_available() else 'cpu' )

writer = SummaryWriter('./results')
seed = 1024
random.seed(seed)
steps_done = 0
EPS_START = 0.9
EPS_END = 0.05
EPS_DECAY = 2000

class Deep_Q_Net(nn.Module):
    def __init__(self, lr, state_dim, action_num, hidden_dim1=128, hidden_dim2=128):
        super(Deep_Q_Net, self).__init__()
        T.manual_seed(seed)
        self.mem_size = 1000000
        self.batch_size = 64
        self.mem_cntr = 0
        self.net_update = 20
        self.gamma = 0.999
        self.fc1 = nn.Linear(*state_dim, hidden_dim1)
        self.fc2 = nn.Linear(hidden_dim1, hidden_dim2)
        self.output = nn.Linear(hidden_dim2, action_num)
        self.state_memory = np.zeros((self.mem_size, *state_dim), dtype=np.float32)
        self.new_state_memory = np.zeros((self.mem_size, *state_dim), dtype=np.float32)
        self.action_memory = np.zeros(self.mem_size, dtype=np.int32)
        self.reward_memory = np.zeros(self.mem_size, dtype=np.float32)
        self.terminal_memory = np.zeros(self.mem_size, dtype=np.bool)

        self.optimizer = optim.Adam(self.parameters(), lr=lr)
        self.loss = nn.MSELoss()
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu' )
        self.to(self.device)

    def forward(self, state):
        x = self.fc1(state)
        x = F.relu(x)
        x = self.fc2(x)
        x = F.relu(x)
        action_value = self.output(x)

        return action_value

    def store_transition(self, state, action, reward, state_, done):
        index = self.mem_cntr % self.mem_size
        self.state_memory[index] = state
        self.new_state_memory[index] = state_
        self.reward_memory[index] = reward
        self.action_memory[index] = action
        self.terminal_memory[index] = done

        self.mem_cntr += 1

    def learn(self):
        if self.mem_cntr < self.batch_size:
            return
        self.optimizer.zero_grad()

        max_mem = min(self.mem_cntr, self.mem_size)
        batch = np.random.choice(max_mem, self.batch_size, replace=False)
        batch_index = np.arange(self.batch_size, dtype=np.int32)

        state_batch = T.tensor(self.state_memory[batch]).to(self.device)
        new_state_batch = T.tensor(self.new_state_memory[batch]).to(self.device)
        reward_batch = T.tensor(self.reward_memory[batch]).to(self.device)
        terminal_batch = T.tensor(self.terminal_memory[batch]).to(self.device)

        action_batch = self.action_memory[batch]

        Q_policy = self.forward(state_batch)[batch_index, action_batch]
        q_next = self.forward(new_state_batch)
        q_next[terminal_batch] = 0.0

        q_target = reward_batch + self.gamma*T.max(q_next, dim=1)[0]

        loss = self.loss(q_target, Q_policy).to(self.device)
        loss.backward()
        self.optimizer.step()

        # if self.mem_cntr % self.net_update == 0:
        #     self.Q_target.load_state_dict(self.Q_policy.state_dict())

        # self.epsilon = self.epsilon - self.eps_dec if self.epsilon > self.eps_min \
        #     else self.eps_min

    def choose_action(self, observation):
        global steps_done
        eps_threshold = EPS_END + (EPS_START - EPS_END) * \
                        math.exp(-1. * steps_done / EPS_DECAY)
        sample = random.random()
        observation = T.tensor([observation], dtype=T.float).to(self.device)
        if sample > eps_threshold:
            with T.no_grad():
                action = T.argmax(q_net_policy_1(observation), dim=1).item()
                # print('max action', type(action))
                # print(action, q_net_policy_1(observation))
        else:
            action = random.randrange(action_dim)
        steps_done += 1

        return action


if __name__=="__main__":
    env = gym.make('CartPole-v1')
    lr = 0.0005
    gamma = 0.9
    env_render = True
    epsilon_start = 0.99
    epsilon_end = 0.01
    action_dim = env.action_space.n
    state_dim = 4
    reward_set = []
    q_net_policy_1 = Deep_Q_Net(lr, [state_dim], action_dim)
    q_net_target_1 = Deep_Q_Net(lr, [state_dim], action_dim)
    q_net_target_1.load_state_dict(q_net_policy_1.state_dict())
    q_net_target_1.eval()
    for i_episode in range(20000):
        observation = env.reset()
        reward_sum = 0
        time_step = 0
        render_frequency = 50
        net_update = 20
        env_render = False
        # if i_episode % render_frequency == 0:
        #     env.render()
        #     env_render = True
        done = False
        while not done:

            action = q_net_policy_1.choose_action(observation)
                # print('random action', type(action))
            observation_, reward, done, info = env.step(action)
            q_net_policy_1.store_transition(observation, action, reward, observation_, done)
            # print(observation_, reward, done, info)
            # print(action)
            # print(q1_)
            q_net_policy_1.learn()
            time_step += 1
            observation = observation_
            # reward_sum += reward.item()

        reward_set.append(time_step)
        if len(reward_set) < 50:
            reward_mean = statistics.mean(reward_set)
        else:
            reward_mean = statistics.mean(reward_set[-50:-1])
        if i_episode % net_update == 0:
            q_net_target_1.load_state_dict(q_net_policy_1.state_dict())
        # reward_mean = statistics.mean(reward_set)
        print('Episode: {}, average_reward: {}'.format(i_episode, reward_mean))
        writer.add_scalar('average step', reward_mean, i_episode)

    env.close()
